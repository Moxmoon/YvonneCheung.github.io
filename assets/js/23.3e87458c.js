(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{634:function(s,a,t){"use strict";t.r(a);var e=t(0),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",[s._v("使用命令行工具对代码进行管理")])]),s._v(" "),t("h2",{attrs:{id:"步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[s._v("#")]),s._v(" 步骤")]),s._v(" "),t("h4",{attrs:{id:"_1-查看-git-项目文件的状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-查看-git-项目文件的状态"}},[s._v("#")]),s._v(" 1. 查看 Git 项目文件的状态")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git status\n")])])]),t("ul",[t("li",[t("p",[t("strong",[s._v("Untracked files")]),s._v("   表示未追踪的文件")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Changes not staged for commit")]),s._v("   表示内容改变需要 git add 加到暂存区")])])]),s._v(" "),t("h4",{attrs:{id:"_2-本地工作区—暂存区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-本地工作区—暂存区"}},[s._v("#")]),s._v(" 2. 本地工作区—暂存区")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git add <filename> "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" git add "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])]),t("h4",{attrs:{id:"_3-暂存区—当前分支-版本库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-暂存区—当前分支-版本库"}},[s._v("#")]),s._v(" 3. 暂存区—当前分支(版本库)")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git commit "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commit message"')]),s._v("\n")])])]),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git checkout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("<filename>  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 用暂存区全部或指定的文件替换工作区的文件\n")])])]),t("p",[s._v("（这个操作很危险，会清除工作区中未添加到暂存区的改动）")]),s._v(" "),t("h4",{attrs:{id:"_4-撤销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-撤销"}},[s._v("#")]),s._v(" 4. 撤销")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("cached <file> "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 仅从暂存区移除，仍保留在工作区中，从跟踪清单删除\n")])])]),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git reset HEAD <filename> \n")])])]),t("ul",[t("li",[t("strong",[s._v("--mixed")]),s._v(" ：不删除工作空间改动代码，撤销 commit，并且撤销"),t("code",[s._v("git add .")]),s._v(" 操作 这个为默认参数，"),t("code",[s._v("git reset --mixed HEAD^")]),s._v("和"),t("code",[s._v("git reset HEAD^")]),s._v("效果是一样的。")]),s._v(" "),t("li",[t("strong",[s._v("--soft")]),s._v(" ：不删除工作空间改动代码，撤销 commit，不撤销 "),t("code",[s._v("git add .")])]),s._v(" "),t("li",[t("strong",[s._v("--hard")]),s._v(" ：删除工作空间改动代码，撤销 commit，撤销 "),t("code",[s._v("git add .")]),s._v("注意完成这个操作后，就恢复到了上一次的 commit 状态。")])]),s._v(" "),t("h4",{attrs:{id:"_5-推送到远程分支、冲突解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-推送到远程分支、冲突解决"}},[s._v("#")]),s._v(" 5. 推送到远程分支、冲突解决")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git push remote"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("name\n")])])]),t("ul",[t("li",[t("p",[t("strong",[s._v("冲突解决")])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git pull "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("rebase\n")])])]),t("ul",[t("li",[s._v("保留冲突从远程仓库拉取最新的代码\n"),t("ol",[t("li",[s._v("若是提示信息里没有提示冲突的文件，则继续 "),t("code",[s._v("git push")])]),s._v(" "),t("li",[s._v("若是提示冲突文件，在每个冲突文件中删除“HEAD -----”等冗余字符，保留需要的代码确认无误后，执行以下代码：")])])])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git add "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n$ git rebase "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),s._v("\n$ git push\n")])])]),t("p",[s._v("还有个情况,会删除冲突文件，可以退出 rebasing，再 git pull 拉取代码进行 merge 操作 "),t("code",[s._v("$ git rebase --abort")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("代码储存")])]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("git pull")]),s._v(" 时若是还有未提交的改变，会提示错误：")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("cannot pull with rebase: Your index contains uncommitted changes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\nplease commit or stash them"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("若有一些不需要传到版本库的文件，可以在 commit 之后，用 stash 命令储存改变，待传完后释放。")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git stash "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 储存在刚提交的分支上"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("未追踪的文件不会被储存"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n$ git stash apply "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 恢复最新的进度到工作区\n\n$ git stash list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 显示保存进度的列表\n\n$ git stash apply "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("[stash_id]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 恢复指定的进度到工作区\n")])])])])])])]),s._v(" "),t("h2",{attrs:{id:"合并分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[s._v("#")]),s._v(" 合并分支")]),s._v(" "),t("h4",{attrs:{id:"合并分支步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并分支步骤"}},[s._v("#")]),s._v(" 合并分支步骤")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git fetch origin  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" dev 分支\n\n$ git checkout master  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 切换到 master 分支\n\n$ git merge "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("no"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ff dev\n")])])]),t("ul",[t("li",[t("p",[t("strong",[s._v("git merge 和 git merge --no-ff 区别")])]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("--no-ff")]),s._v(" 指的是强行关闭 fast-forward 方式。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("fast-forward")]),s._v(" 方式就是当条件允许的时候，git 直接把 HEAD 指针指向合并分支的头，完成合并。属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建 commit")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("git merge --squash")]),s._v(" 是用来把一些不必要 commit 进行压缩，比如说，你的 feature 在开发的时候写的 commit 很乱，那么我们合并的时候不希望把这些历史 commit 带过来，于是使用--squash 进行合并，此时文件已经同合并后一样了，但不移动 HEAD，不提交。需要进行一次额外的 commit 来“总结”一下，然后完成最终的合并。")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("总结：")])]),s._v(" "),t("p",[t("strong",[s._v("--no-ff")]),s._v("：不使用 fast-forward 方式合并，保留分支的 commit 历史")]),s._v(" "),t("p",[t("strong",[s._v("--squash")]),s._v("：使用 squash 方式合并，把多次分支 commit 历史压缩为一次")])])]),s._v(" "),t("h2",{attrs:{id:"其他命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他命令"}},[s._v("#")]),s._v(" 其他命令")]),s._v(" "),t("h4",{attrs:{id:"显示所有提交过的版本信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显示所有提交过的版本信息"}},[s._v("#")]),s._v(" 显示所有提交过的版本信息")]),s._v(" "),t("ul",[t("li",[s._v("利用这个版本记录，可以回退到我们之前提交的任何一次提交过的版本")])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git log \n")])])]),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git log "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("pretty=oneline "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 信息太多可以加上"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("pretty=oneline\n")])])]),t("ul",[t("li",[s._v("某个时间段的提交并且隐藏合并提交")])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git log "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("oneline "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("before="),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("weeks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ago"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("after="),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("2019"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("04"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("18"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("no"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("merges\n")])])]),t("h4",{attrs:{id:"查看所有分支的所有操作记录（包括已经被删除的-commit-记录和-reset-的操作）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看所有分支的所有操作记录（包括已经被删除的-commit-记录和-reset-的操作）"}},[s._v("#")]),s._v(" 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git reflog\n")])])]),t("h4",{attrs:{id:"回退到任意一次记录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回退到任意一次记录"}},[s._v("#")]),s._v(" 回退到任意一次记录")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git reset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("hard "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("[log_id]")]),s._v("\n")])])]),t("h4",{attrs:{id:"查看版本改动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看版本改动"}},[s._v("#")]),s._v(" 查看版本改动")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("工作区<->暂存区")])])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v("\n")])])]),t("ol",[t("li",[t("p",[s._v("当暂存区中没有文件时，git diff 比较的是，工作区中的文件与上次提交到版本库中的文件。")])]),s._v(" "),t("li",[t("p",[s._v("当暂存区中有文件时，git diff 则比较的是，当前工作区中的文件与暂存区中的文件。")])])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("暂存区<->版本库")])])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("cached\n")])])]),t("ul",[t("li",[t("strong",[s._v("工作区<-版本库")])])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" HEAD "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("<filename>\n")])])]),t("h4",{attrs:{id:"大小写重命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大小写重命名"}},[s._v("#")]),s._v(" 大小写重命名")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("$ git "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("f <oldfilename> <newfilename>\n")])])]),t("p",[s._v("大小写修改识别不出，需要先修改成其他名字再改回来")])])}),[],!1,null,null,null);a.default=r.exports}}]);